AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS infrastructure setup using existing VPC'

Parameters:
  ClusterName:
    Type: String
    Default: 'my-eks-cluster'
    Description: 'Name of the EKS cluster'
  
  KeyPairName:
    Description: 'Name of an existing EC2 KeyPair to enable SSH access'
    Type: 'AWS::EC2::KeyPair::KeyName'
  
  VpcId:
    Type: String
    Description: 'VPC ID where the EKS cluster will be deployed'
  
  PublicSubnetIds:
    Type: CommaDelimitedList
    Description: 'List of public subnet IDs'
  
  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: 'List of private subnet IDs (optional)'
    Default: ''

  KubernetesVersion:
    Description: 'Kubernetes version for the EKS cluster'
    Type: String
    Default: '1.33'
    AllowedValues:
      - '1.31'
      - '1.32'
      - '1.33'

Conditions:
  # Check if private subnets are provided
  HasPrivateSubnets: !Not [!Equals [!Join ['', !Ref PrivateSubnetIds], '']]

Resources:
  # EKS Cluster Service Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  # Security Group for EKS Cluster
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access to EKS API
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-cluster-sg'

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds: !If
          - HasPrivateSubnets
          - !Split
            - ','
            - !Sub
              - '${inner}'
              - inner: !Join
                - ','
                - - !Join [',', !Ref PublicSubnetIds]
                  - !Join [',', !Ref PrivateSubnetIds]
          - !Ref PublicSubnetIds
        EndpointPrivateAccess: false
        EndpointPublicAccess: true

Outputs:
  ClusterName:
    Description: 'EKS Cluster Name'
    Value: !Ref EKSCluster
    Export:
      Name: !Sub '${AWS::StackName}-CLUSTER-NAME'
  
  ClusterArn:
    Description: 'EKS Cluster ARN'
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CLUSTER-ARN'
  
  ClusterEndpoint:
    Description: 'EKS Cluster Endpoint'
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-CLUSTER-ENDPOINT'
  
  KeyPairName:
    Description: 'EC2 Key Pair Name'
    Value: !Ref KeyPairName
    Export:
      Name: !Sub '${AWS::StackName}-KEY-PAIR-NAME'
  
  SubnetConfiguration:
    Description: 'Subnet configuration used'
    Value: !If
      - HasPrivateSubnets
      - 'Public and Private subnets'
      - 'Public subnets only'
    Export:
      Name: !Sub '${AWS::StackName}-SUBNET-CONFIG'
