name: Release RPM package

on:
  push:
    branches:
      - main

  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Fetch all tags
      run: git fetch --tags

    - name: Parse Version from docker-compose.yml
      id: parse_version
      run: |
        # Extract the latest version from the docker-compose line "image: aivhub/aiv:6.3.8"
        IMAGE_VERSION=$(cat docker-compose.yml | awk /'image: aivhub\/aiv:/ {print $2}' | cut -d':' -f2 | head -n1)
        if [[ -z "$IMAGE_VERSION" ]]; then
          echo "Error: Could not parse version from docker-compose.yml"
          exit 1
        fi
        echo "Parsed version: $IMAGE_VERSION"
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV

    - name: Determine Release Number
      # if the tag already exists, get last release number and increment it. Example tags: `rpm/6.3.8-1`, `rpm/6.3.8-2`
      env:
        IMAGE_VERSION: ${{ env.IMAGE_VERSION }}
      run: |
        if git ls-remote --tags origin | grep -q "refs/tags/rpm/${IMAGE_VERSION}"; then
          echo "Tag rpm/${IMAGE_VERSION}-* already exists. Finding the latest release number."
          LATEST_RELEASE=$(git ls-remote --tags origin | grep "refs/tags/rpm/${IMAGE_VERSION}-" | sed "s/.*debian\/${IMAGE_VERSION}-//" | sort -V | tail -n1)
          if [[ -z "$LATEST_RELEASE" ]]; then
            LATEST_RELEASE=0
          fi
          RELEASE=$((LATEST_RELEASE + 1))
          echo "Incremented release number to $RELEASE"
        else
          echo "No existing tags found for version ${IMAGE_VERSION}. Setting release number to 0."
          RELEASE=0
        fi

        # Build release version string
        if [[ "$RELEASE" -eq 0 ]]; then
          VERSION="$IMAGE_VERSION"
        else
          VERSION="${IMAGE_VERSION}-${RELEASE}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Using release version: $VERSION"

    - name: Get run.jar from Docker image
      env:
        IMAGE_VERSION: ${{ env.IMAGE_VERSION }}
      run: |
        echo "Using image version: $IMAGE_VERSION"
        docker pull jits023/aiv:${IMAGE_VERSION}
        docker create --name aiv_container aivhub/aiv:${IMAGE_VERSION}
        docker cp aiv_container:/opt/run.jar aiv.jar
        docker rm -f aiv_container

    - name: Build RPM package
      run: |
        echo "Building RPM package for version ${VERSION}"
        docker run --rm \
          -e "VERSION=$VERSION" \
          -e "RELEASE=$RELEASE" \
          -v $PWD:/workspace \
          -w /workspace \
          rockylinux:9 \
          bash -c "
            # Install required packages for RPM building
            dnf install -y rpm-build rpm-devel rpmdevtools \
                          java-17-openjdk-devel \
                          gettext \
                          tar gzip \
                          systemd
            
            # Set up RPM build environment
            rpmdev-setuptree
            
            # Run the build script
            DEBUG=1 bash aiv-build-rpm.sh
          "

    - name: Create and Push Tag
      env:
        VERSION: ${{ env.VERSION }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=rpm/${VERSION}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${TAG_NAME}
        git push origin ${TAG_NAME}

    - name: Release
      env:
        VERSION: ${{ env.VERSION }}
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: rpm/${VERSION}
        name: "RPM Release ${VERSION}"
        body: |
          RPM package release for AIV version ${VERSION}
          
          ## Installation Instructions
          
          ### Red Hat Enterprise Linux / CentOS / Rocky Linux / AlmaLinux:
          ```bash
          # Download the RPM package from GitHub Releases
          wget https://github.com/${{ github.repository }}/releases
          
          # Install the package
          sudo dnf install -y ./aiv-${VERSION}.*.rpm
          
          # Start and enable the service
          sudo systemctl enable --now aiv.service
          ```
          
          ### Fedora:
          ```bash
          # Download and install
          sudo dnf install -y https://github.com/${{ github.repository }}/releases/download/rpm/${VERSION}/aiv-${VERSION}.*.rpm
          
          # Start and enable the service
          sudo systemctl enable --now aiv.service
          ```
          
          ## Requirements
          - Java 17 or higher
          - PostgreSQL server
          - systemd (for service management)
          
        files: |
          aiv*.rpm

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ['rockylinux:9', 'rockylinux:8', 'almalinux:9', 'fedora:38']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: rpm-packages
        path: ./
      continue-on-error: true
    
    - name: Test RPM installation on ${{ matrix.distro }}
      run: |
        echo "Testing RPM installation on ${{ matrix.distro }}"
        
        # Find the RPM file (it should be available from the build job)
        RPM_FILE=$(ls *.rpm | head -n 1)
        
        if [ -z "$RPM_FILE" ]; then
          echo "No RPM file found, skipping test"
          exit 0
        fi
        
        docker run --rm -v $PWD:/workspace ${{ matrix.distro }} bash -c "
          # Install Java (required dependency)
          if command -v dnf >/dev/null 2>&1; then
            dnf install -y java-17-openjdk postgresql-server
          elif command -v yum >/dev/null 2>&1; then
            yum install -y java-17-openjdk postgresql-server
          fi
          
          # Test RPM installation (dry run)
          rpm -qp /workspace/$RPM_FILE
          
          # Test dependency resolution
          rpm -qpR /workspace/$RPM_FILE
          
          echo 'RPM package validation completed successfully'
        "
